{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\n\n// 🎯 파일 상단에 API URL 설정 추가\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';\nexport function useComments() {\n  _s();\n  const [comments, setComments] = useState({});\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const fetchCommentsFromDB = async projectId => {\n    try {\n      console.log(`프로젝트 ${projectId} 댓글 로딩 시작...`);\n      const response = await fetch(`${API_URL}/api/comments/${projectId}`);\n      if (response.ok) {\n        const result = await response.json();\n        console.log(`프로젝트 ${projectId} API 응답:`, result);\n        if (result.success && result.data) {\n          return result.data;\n        } else {\n          console.error('API 응답 오류:', result.error || '데이터 없음');\n          return [];\n        }\n      } else {\n        console.error('댓글 불러오기 실패 - HTTP 상태:', response.status);\n        return [];\n      }\n    } catch (error) {\n      console.error('댓글 불러오기 오류:', error);\n      return [];\n    }\n  };\n  const addCommentToDB = async (projectId, username, content) => {\n    try {\n      console.log(`댓글 추가 시도: 프로젝트 ${projectId}`);\n      const response = await fetch(`${API_URL}/api/comments/${projectId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: username,\n          content: content\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n        if (result.success && result.data) {\n          return result.data;\n        }\n      }\n      return null;\n    } catch (error) {\n      console.error('댓글 추가 오류:', error);\n      return null;\n    }\n  };\n  const getCommentsForItem = useCallback(async itemId => {\n    setIsLoadingComments(true);\n    try {\n      const dbComments = await fetchCommentsFromDB(itemId);\n      setComments(prev => ({\n        ...prev,\n        [itemId]: dbComments\n      }));\n    } catch (error) {\n      console.error('댓글 로딩 오류:', error);\n      setComments(prev => ({\n        ...prev,\n        [itemId]: []\n      }));\n    } finally {\n      setIsLoadingComments(false);\n    }\n  }, []);\n  const addComment = async (itemId, username, content) => {\n    if (!content.trim()) return;\n    const tempId = `temp_${Date.now()}`;\n    const tempComment = {\n      id: tempId,\n      username: username.trim(),\n      timeAgo: '방금 전',\n      content: content.trim(),\n      avatar: username.trim().substring(0, 1),\n      isTemporary: true\n    };\n    const currentComments = comments[itemId] || [];\n    setComments(prev => ({\n      ...prev,\n      [itemId]: [tempComment, ...currentComments]\n    }));\n    try {\n      const dbComment = await addCommentToDB(itemId, username.trim(), content.trim());\n      if (dbComment) {\n        setComments(prev => ({\n          ...prev,\n          [itemId]: prev[itemId].map(comment => {\n            var _dbComment$username;\n            return comment.id === tempId ? {\n              ...dbComment,\n              avatar: ((_dbComment$username = dbComment.username) === null || _dbComment$username === void 0 ? void 0 : _dbComment$username.substring(0, 1)) || dbComment.avatar\n            } : comment;\n          })\n        }));\n        return true;\n      } else {\n        setComments(prev => ({\n          ...prev,\n          [itemId]: prev[itemId].filter(comment => comment.id !== tempId)\n        }));\n        return false;\n      }\n    } catch (error) {\n      console.error('댓글 추가 실패:', error);\n      setComments(prev => ({\n        ...prev,\n        [itemId]: prev[itemId].filter(comment => comment.id !== tempId)\n      }));\n      return false;\n    }\n  };\n  const refreshComments = itemId => {\n    setComments(prev => {\n      const updated = {\n        ...prev\n      };\n      delete updated[itemId];\n      return updated;\n    });\n    getCommentsForItem(itemId);\n  };\n  return {\n    comments,\n    isLoadingComments,\n    getCommentsForItem,\n    addComment,\n    refreshComments\n  };\n}\n_s(useComments, \"IatkoCnHttlrufs2gdXzZvGQ894=\");","map":{"version":3,"names":["useState","useCallback","API_URL","process","env","NEXT_PUBLIC_API_URL","useComments","_s","comments","setComments","isLoadingComments","setIsLoadingComments","fetchCommentsFromDB","projectId","console","log","response","fetch","ok","result","json","success","data","error","status","addCommentToDB","username","content","method","headers","body","JSON","stringify","getCommentsForItem","itemId","dbComments","prev","addComment","trim","tempId","Date","now","tempComment","id","timeAgo","avatar","substring","isTemporary","currentComments","dbComment","map","comment","_dbComment$username","filter","refreshComments","updated"],"sources":["C:/Users/user/Desktop/react/renewal_react/src/hooks/useComments.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\n\r\n// 🎯 파일 상단에 API URL 설정 추가\r\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';\r\n\r\nexport function useComments() {\r\n    const [comments, setComments] = useState({});\r\n    const [isLoadingComments, setIsLoadingComments] = useState(false);\r\n\r\n    const fetchCommentsFromDB = async (projectId) => {\r\n        try {\r\n            console.log(`프로젝트 ${projectId} 댓글 로딩 시작...`);\r\n            const response = await fetch(`${API_URL}/api/comments/${projectId}`);\r\n\r\n            if (response.ok) {\r\n                const result = await response.json();\r\n                console.log(`프로젝트 ${projectId} API 응답:`, result);\r\n\r\n                if (result.success && result.data) {\r\n                    return result.data;\r\n                } else {\r\n                    console.error('API 응답 오류:', result.error || '데이터 없음');\r\n                    return [];\r\n                }\r\n            } else {\r\n                console.error('댓글 불러오기 실패 - HTTP 상태:', response.status);\r\n                return [];\r\n            }\r\n        } catch (error) {\r\n            console.error('댓글 불러오기 오류:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const addCommentToDB = async (projectId, username, content) => {\r\n        try {\r\n            console.log(`댓글 추가 시도: 프로젝트 ${projectId}`);\r\n            const response = await fetch(`${API_URL}/api/comments/${projectId}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    username: username,\r\n                    content: content\r\n                })\r\n            });\r\n\r\n            if (response.ok) {\r\n                const result = await response.json();\r\n                if (result.success && result.data) {\r\n                    return result.data;\r\n                }\r\n            }\r\n            return null;\r\n        } catch (error) {\r\n            console.error('댓글 추가 오류:', error);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    const getCommentsForItem = useCallback(async (itemId) => {\r\n        setIsLoadingComments(true);\r\n        try {\r\n            const dbComments = await fetchCommentsFromDB(itemId);\r\n            setComments(prev => ({\r\n                ...prev,\r\n                [itemId]: dbComments\r\n            }));\r\n        } catch (error) {\r\n            console.error('댓글 로딩 오류:', error);\r\n            setComments(prev => ({\r\n                ...prev,\r\n                [itemId]: []\r\n            }));\r\n        } finally {\r\n            setIsLoadingComments(false);\r\n        }\r\n    }, []);\r\n\r\n    const addComment = async (itemId, username, content) => {\r\n        if (!content.trim()) return;\r\n\r\n        const tempId = `temp_${Date.now()}`;\r\n        const tempComment = {\r\n            id: tempId,\r\n            username: username.trim(),\r\n            timeAgo: '방금 전',\r\n            content: content.trim(),\r\n            avatar: username.trim().substring(0, 1),\r\n            isTemporary: true\r\n        };\r\n\r\n        const currentComments = comments[itemId] || [];\r\n        setComments(prev => ({\r\n            ...prev,\r\n            [itemId]: [tempComment, ...currentComments]\r\n        }));\r\n\r\n        try {\r\n            const dbComment = await addCommentToDB(itemId, username.trim(), content.trim());\r\n\r\n            if (dbComment) {\r\n                setComments(prev => ({\r\n                    ...prev,\r\n                    [itemId]: prev[itemId].map(comment =>\r\n                        comment.id === tempId ? {\r\n                            ...dbComment,\r\n                            avatar: dbComment.username?.substring(0, 1) || dbComment.avatar\r\n                        } : comment\r\n                    )\r\n                }));\r\n                return true;\r\n            } else {\r\n                setComments(prev => ({\r\n                    ...prev,\r\n                    [itemId]: prev[itemId].filter(comment => comment.id !== tempId)\r\n                }));\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            console.error('댓글 추가 실패:', error);\r\n            setComments(prev => ({\r\n                ...prev,\r\n                [itemId]: prev[itemId].filter(comment => comment.id !== tempId)\r\n            }));\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const refreshComments = (itemId) => {\r\n        setComments(prev => {\r\n            const updated = { ...prev };\r\n            delete updated[itemId];\r\n            return updated;\r\n        });\r\n        getCommentsForItem(itemId);\r\n    };\r\n\r\n    return {\r\n        comments,\r\n        isLoadingComments,\r\n        getCommentsForItem,\r\n        addComment,\r\n        refreshComments\r\n    };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}