{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';\nexport function usePortfolio() {\n  _s();\n  const [portfolioData, setPortfolioData] = useState({});\n  const [isLoadingPortfolio, setIsLoadingPortfolio] = useState(true);\n  const fetchPortfolioData = async () => {\n    try {\n      setIsLoadingPortfolio(true);\n      console.log('포트폴리오 데이터 로딩 시작...');\n      const response = await fetch(`${API_URL}/api/portfolio`);\n      if (response.ok) {\n        const result = await response.json();\n        console.log('포트폴리오 API 응답:', result);\n        if (result.success && result.data) {\n          const groupedData = {};\n          result.data.forEach(item => {\n            if (!groupedData[item.category]) {\n              groupedData[item.category] = [];\n            }\n            let parsedSkills = [];\n            try {\n              parsedSkills = JSON.parse(item.skills);\n            } catch (e) {\n              console.warn('스킬 파싱 오류:', item.skills);\n              parsedSkills = [];\n            }\n            groupedData[item.category].push({\n              id: item.id,\n              badge: item.badge,\n              badgeText: item.badge_text,\n              image: item.image,\n              mallName: item.mall_name,\n              title: item.title,\n              participants: item.participants,\n              winners: item.winners,\n              deadline: item.deadline,\n              type: item.type,\n              skills: parsedSkills,\n              url: item.url,\n              content: item.content\n            });\n          });\n          setPortfolioData(groupedData);\n          console.log('포트폴리오 데이터 로드 완료:', groupedData);\n        } else {\n          console.error('포트폴리오 API 응답 오류:', result.error);\n          setPortfolioData({});\n        }\n      } else {\n        console.error('포트폴리오 불러오기 실패 - HTTP 상태:', response.status);\n        setPortfolioData({});\n      }\n    } catch (error) {\n      console.error('포트폴리오 불러오기 오류:', error);\n      setPortfolioData({});\n    } finally {\n      setIsLoadingPortfolio(false);\n    }\n  };\n  useEffect(() => {\n    fetchPortfolioData();\n  }, []);\n  return {\n    portfolioData,\n    isLoadingPortfolio,\n    fetchPortfolioData\n  };\n}\n_s(usePortfolio, \"BEVEW0nfSmTmA+Is7QUuCz0ZgVo=\");","map":{"version":3,"names":["useState","useEffect","API_URL","process","env","NEXT_PUBLIC_API_URL","usePortfolio","_s","portfolioData","setPortfolioData","isLoadingPortfolio","setIsLoadingPortfolio","fetchPortfolioData","console","log","response","fetch","ok","result","json","success","data","groupedData","forEach","item","category","parsedSkills","JSON","parse","skills","e","warn","push","id","badge","badgeText","badge_text","image","mallName","mall_name","title","participants","winners","deadline","type","url","content","error","status"],"sources":["C:/Users/user/Desktop/react/renewal_react/src/hooks/usePortfolio.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';\r\n\r\nexport function usePortfolio() {\r\n    const [portfolioData, setPortfolioData] = useState({});\r\n    const [isLoadingPortfolio, setIsLoadingPortfolio] = useState(true);\r\n\r\n    const fetchPortfolioData = async () => {\r\n        try {\r\n            setIsLoadingPortfolio(true);\r\n            console.log('포트폴리오 데이터 로딩 시작...');\r\n\r\n            const response = await fetch(`${API_URL}/api/portfolio`);\r\n\r\n            if (response.ok) {\r\n                const result = await response.json();\r\n                console.log('포트폴리오 API 응답:', result);\r\n\r\n                if (result.success && result.data) {\r\n                    const groupedData = {};\r\n                    result.data.forEach(item => {\r\n                        if (!groupedData[item.category]) {\r\n                            groupedData[item.category] = [];\r\n                        }\r\n\r\n                        let parsedSkills = [];\r\n                        try {\r\n                            parsedSkills = JSON.parse(item.skills);\r\n                        } catch (e) {\r\n                            console.warn('스킬 파싱 오류:', item.skills);\r\n                            parsedSkills = [];\r\n                        }\r\n\r\n                        groupedData[item.category].push({\r\n                            id: item.id,\r\n                            badge: item.badge,\r\n                            badgeText: item.badge_text,\r\n                            image: item.image,\r\n                            mallName: item.mall_name,\r\n                            title: item.title,\r\n                            participants: item.participants,\r\n                            winners: item.winners,\r\n                            deadline: item.deadline,\r\n                            type: item.type,\r\n                            skills: parsedSkills,\r\n                            url: item.url,\r\n                            content: item.content\r\n                        });\r\n                    });\r\n\r\n                    setPortfolioData(groupedData);\r\n                    console.log('포트폴리오 데이터 로드 완료:', groupedData);\r\n                } else {\r\n                    console.error('포트폴리오 API 응답 오류:', result.error);\r\n                    setPortfolioData({});\r\n                }\r\n            } else {\r\n                console.error('포트폴리오 불러오기 실패 - HTTP 상태:', response.status);\r\n                setPortfolioData({});\r\n            }\r\n        } catch (error) {\r\n            console.error('포트폴리오 불러오기 오류:', error);\r\n            setPortfolioData({});\r\n        } finally {\r\n            setIsLoadingPortfolio(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchPortfolioData();\r\n    }, []);\r\n\r\n    return {\r\n        portfolioData,\r\n        isLoadingPortfolio,\r\n        fetchPortfolioData\r\n    };\r\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,mBAAmB,IAAI,uBAAuB;AAE1E,OAAO,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACU,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAElE,MAAMY,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACAD,qBAAqB,CAAC,IAAI,CAAC;MAC3BE,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MAEjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,OAAO,gBAAgB,CAAC;MAExD,IAAIa,QAAQ,CAACE,EAAE,EAAE;QACb,MAAMC,MAAM,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACpCN,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEI,MAAM,CAAC;QAEpC,IAAIA,MAAM,CAACE,OAAO,IAAIF,MAAM,CAACG,IAAI,EAAE;UAC/B,MAAMC,WAAW,GAAG,CAAC,CAAC;UACtBJ,MAAM,CAACG,IAAI,CAACE,OAAO,CAACC,IAAI,IAAI;YACxB,IAAI,CAACF,WAAW,CAACE,IAAI,CAACC,QAAQ,CAAC,EAAE;cAC7BH,WAAW,CAACE,IAAI,CAACC,QAAQ,CAAC,GAAG,EAAE;YACnC;YAEA,IAAIC,YAAY,GAAG,EAAE;YACrB,IAAI;cACAA,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAACK,MAAM,CAAC;YAC1C,CAAC,CAAC,OAAOC,CAAC,EAAE;cACRjB,OAAO,CAACkB,IAAI,CAAC,WAAW,EAAEP,IAAI,CAACK,MAAM,CAAC;cACtCH,YAAY,GAAG,EAAE;YACrB;YAEAJ,WAAW,CAACE,IAAI,CAACC,QAAQ,CAAC,CAACO,IAAI,CAAC;cAC5BC,EAAE,EAAET,IAAI,CAACS,EAAE;cACXC,KAAK,EAAEV,IAAI,CAACU,KAAK;cACjBC,SAAS,EAAEX,IAAI,CAACY,UAAU;cAC1BC,KAAK,EAAEb,IAAI,CAACa,KAAK;cACjBC,QAAQ,EAAEd,IAAI,CAACe,SAAS;cACxBC,KAAK,EAAEhB,IAAI,CAACgB,KAAK;cACjBC,YAAY,EAAEjB,IAAI,CAACiB,YAAY;cAC/BC,OAAO,EAAElB,IAAI,CAACkB,OAAO;cACrBC,QAAQ,EAAEnB,IAAI,CAACmB,QAAQ;cACvBC,IAAI,EAAEpB,IAAI,CAACoB,IAAI;cACff,MAAM,EAAEH,YAAY;cACpBmB,GAAG,EAAErB,IAAI,CAACqB,GAAG;cACbC,OAAO,EAAEtB,IAAI,CAACsB;YAClB,CAAC,CAAC;UACN,CAAC,CAAC;UAEFrC,gBAAgB,CAACa,WAAW,CAAC;UAC7BT,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEQ,WAAW,CAAC;QAChD,CAAC,MAAM;UACHT,OAAO,CAACkC,KAAK,CAAC,kBAAkB,EAAE7B,MAAM,CAAC6B,KAAK,CAAC;UAC/CtC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QACxB;MACJ,CAAC,MAAM;QACHI,OAAO,CAACkC,KAAK,CAAC,0BAA0B,EAAEhC,QAAQ,CAACiC,MAAM,CAAC;QAC1DvC,gBAAgB,CAAC,CAAC,CAAC,CAAC;MACxB;IACJ,CAAC,CAAC,OAAOsC,KAAK,EAAE;MACZlC,OAAO,CAACkC,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtCtC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC,SAAS;MACNE,qBAAqB,CAAC,KAAK,CAAC;IAChC;EACJ,CAAC;EAEDV,SAAS,CAAC,MAAM;IACZW,kBAAkB,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACHJ,aAAa;IACbE,kBAAkB;IAClBE;EACJ,CAAC;AACL;AAACL,EAAA,CA1EeD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}