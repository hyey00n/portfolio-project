import React, { useState, useEffect } from 'react';

function FaqSection() {
    console.log('üî• FaqSection Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Î†åÎçîÎßÅÎê®!');
    const [activeTab, setActiveTab] = useState('Í∏∞Ïà†Ï†Å Ïù¥Ìï¥ÎèÑ');
    const [searchQuery, setSearchQuery] = useState('');
    const [openAccordions, setOpenAccordions] = useState(new Set());
    const [faqData, setFaqData] = useState([]);
    const [categories, setCategories] = useState([]);
    const [loading, setLoading] = useState(true);
    const [searchResults, setSearchResults] = useState([]);
    const [isSearchMode, setIsSearchMode] = useState(false);
    const [error, setError] = useState(null);

    useEffect(() => {
        fetchCategories();
        fetchFaqData('Í∏∞Ïà†Ï†Å Ïù¥Ìï¥ÎèÑ');
    }, []);



    const fetchCategories = async () => {
        try {
            console.log('Ïπ¥ÌÖåÍ≥†Î¶¨ ÏöîÏ≤≠ ÏãúÏûë...');
            const response = await fetch('http://localhost:3001/api/faq/categories');

            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error(`ÏÑúÎ≤ÑÏóêÏÑú HTML ÏùëÎãµÏùÑ Î∞õÏïòÏäµÎãàÎã§. API ÏóîÎìúÌè¨Ïù∏Ìä∏Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.`);
            }

            const data = await response.json();
            console.log('Ïπ¥ÌÖåÍ≥†Î¶¨ ÏùëÎãµ:', data);

            if (data.success) {
                setCategories(data.data);
                if (data.data.includes('Í∏∞Ïà†Ï†Å Ïù¥Ìï¥ÎèÑ')) {
                    setActiveTab('Í∏∞Ïà†Ï†Å Ïù¥Ìï¥ÎèÑ');
                } else if (data.data.length > 0) {
                    setActiveTab(data.data[0]);
                }
            } else {
                throw new Error(data.message || 'Ïπ¥ÌÖåÍ≥†Î¶¨ Î°úÎî© Ïã§Ìå®');
            }
        } catch (error) {
            console.error('Ïπ¥ÌÖåÍ≥†Î¶¨ Î°úÎî© Ïò§Î•ò:', error);
            setError('ÏÑúÎ≤Ñ Ïó∞Í≤∞Ïóê Î¨∏Ï†úÍ∞Ä ÏûàÏäµÎãàÎã§. API ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
            setCategories(['Í∏∞Ïà†Ï†Å Ïù¥Ìï¥ÎèÑ', 'ÎîîÏûêÏù∏ ÌîÑÎ°úÏÑ∏Ïä§', 'ÌòëÏóÖ Í≤ΩÌóò', 'ÏÇ¨Ïö©Ïûê Î¶¨ÏÑúÏπò', 'ÎπÑÏ¶àÎãàÏä§ ÏûÑÌå©Ìä∏']);
            setActiveTab('Í∏∞Ïà†Ï†Å Ïù¥Ìï¥ÎèÑ');
        }
    };

    const fetchFaqData = async (category = null) => {
        try {
            setLoading(true);
            setError(null);

            const url = category ? `http://localhost:3001/api/faq?category=${encodeURIComponent(category)}` : 'http://localhost:3001/api/faq';
            console.log('FAQ ÏöîÏ≤≠:', url);

            const response = await fetch(url);

            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('ÏÑúÎ≤ÑÏóêÏÑú HTML ÏùëÎãµÏùÑ Î∞õÏïòÏäµÎãàÎã§. API ÏóîÎìúÌè¨Ïù∏Ìä∏Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.');
            }

            const data = await response.json();
            console.log('FAQ ÏùëÎãµ:', data);

            if (data.success) {
                setFaqData(data.data);
            } else {
                throw new Error(data.message || 'FAQ Î°úÎî© Ïã§Ìå®');
            }
        } catch (error) {
            console.error('FAQ Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïò§Î•ò:', error);
            setError('FAQ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§. ÏÑúÎ≤Ñ ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
            setFaqData([]);
        } finally {
            setLoading(false);
        }
    };

    const handleSearch = async (e) => {
        e.preventDefault();

        if (!searchQuery.trim()) {
            setIsSearchMode(false);
            fetchFaqData(activeTab);
            return;
        }

        try {
            setLoading(true);
            setError(null);

            const response = await fetch(`http://localhost:3001/api/faq/search?q=${encodeURIComponent(searchQuery)}`);

            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('ÏÑúÎ≤ÑÏóêÏÑú HTML ÏùëÎãµÏùÑ Î∞õÏïòÏäµÎãàÎã§.');
            }

            const data = await response.json();

            if (data.success) {
                setSearchResults(data.data);
                setIsSearchMode(true);
                setOpenAccordions(new Set());
            } else {
                throw new Error(data.message || 'Í≤ÄÏÉâ Ïã§Ìå®');
            }
        } catch (error) {
            console.error('Í≤ÄÏÉâ Ïò§Î•ò:', error);
            setError('Í≤ÄÏÉâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        } finally {
            setLoading(false);
        }
    };

    const handleTabClick = (category) => {
        setActiveTab(category);
        setOpenAccordions(new Set());
        setIsSearchMode(false);
        setSearchQuery('');
        fetchFaqData(category);
    };

    const handleAccordionClick = (questionId) => {
        const newOpenAccordions = new Set(openAccordions);
        if (newOpenAccordions.has(questionId)) {
            newOpenAccordions.delete(questionId);
        } else {
            newOpenAccordions.add(questionId);
        }
        setOpenAccordions(newOpenAccordions);
    };

    const handleSearchInputChange = (e) => {
        const value = e.target.value;
        setSearchQuery(value);

        if (!value.trim()) {
            setIsSearchMode(false);
            fetchFaqData(activeTab);
        }
    };

    const currentFaqData = isSearchMode ? searchResults : faqData;

    return (
        <>


            <h2 className="h3-title">ÏûêÏ£ºÌïòÎäî ÏßàÎ¨∏</h2>

            {error && (
                <div className="error-message" style={{
                    background: '#ffebee',
                    color: '#c62828',
                    padding: '10px',
                    marginBottom: '20px',
                    borderRadius: '4px'
                }}>
                    <p>{error}</p>
                    <button
                        onClick={() => {
                            setError(null);
                            fetchCategories();
                            fetchFaqData();
                        }}
                        style={{ marginTop: '10px', padding: '5px 10px' }}
                    >
                        Îã§Ïãú ÏãúÎèÑ
                    </button>
                </div>
            )}

            <div className="top-search-pos-right">
                <div className="search-fieldset">
                    <input
                        type="text"
                        name="search"
                        id="search"
                        value={searchQuery}
                        onChange={handleSearchInputChange}
                        placeholder="Í≤ÄÏÉâÏñ¥ ÏûÖÎ†•"
                        className="inputBox-round"
                    />
                    <button
                        type="button"
                        className="btn-search"
                        onClick={handleSearch}
                        aria-label="Í≤ÄÏÉâ"
                    ></button>
                </div>
            </div>

            {isSearchMode && (
                <div className="search-info">
                    <p>"{searchQuery}" Í≤ÄÏÉâ Í≤∞Í≥º: {searchResults.length}Í∞ú</p>
                    <button
                        onClick={() => {
                            setIsSearchMode(false);
                            setSearchQuery('');
                            fetchFaqData(activeTab);
                        }}
                        className="btn-clear-search"
                    >
                        Ï†ÑÏ≤¥ Î≥¥Í∏∞
                    </button>
                </div>
            )}

            <div className="tab-type-tab-shadow">
                {!isSearchMode && (
                    <ul className="tab-content">
                        {categories.map(category => (
                            <li key={category}>
                                <a
                                    href={`#${category}`}
                                    className={activeTab === category ? 'active' : ''}
                                    onClick={(e) => {
                                        e.preventDefault();
                                        handleTabClick(category);
                                    }}
                                >
                                    {category}
                                </a>
                            </li>
                        ))}
                    </ul>
                )}

                <div className="tabcontent top">
                    <div id={activeTab}>
                        <section className="shadowBox3">
                            <div className="faq-accordion-caution">
                                {loading ? (
                                    <div className="loading">
                                        <p>Î°úÎî© Ï§ë...</p>
                                    </div>
                                ) : currentFaqData.length > 0 ? (
                                    currentFaqData.map(faq => (
                                        <div key={faq.id}>
                                            <button
                                                className={`acc-title ${openAccordions.has(faq.id) ? 'active' : ''}`}
                                                onClick={() => handleAccordionClick(faq.id)}
                                            >
                                                {isSearchMode && (
                                                    <span className="category-badge">[{faq.category}]</span>
                                                )}
                                                {faq.question}
                                            </button>
                                            <div
                                                className="acc-content"
                                                style={{
                                                    maxHeight: openAccordions.has(faq.id) ? 'none' : '0',
                                                    overflow: 'hidden',
                                                    transition: 'max-height 0.3s ease'
                                                }}
                                            >
                                                <p className="in-text">{faq.answer}</p>
                                            </div>
                                        </div>
                                    ))
                                ) : (
                                    <div className="no-data">
                                        <p>
                                            {isSearchMode
                                                ? `"${searchQuery}"Ïóê ÎåÄÌïú Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.`
                                                : 'Ìï¥Îãπ Ïπ¥ÌÖåÍ≥†Î¶¨Ïóê Îì±Î°ùÎêú FAQÍ∞Ä ÏóÜÏäµÎãàÎã§.'
                                            }
                                        </p>
                                    </div>
                                )}
                            </div>
                        </section>
                    </div>
                </div>
            </div>

        </>

    );
}

export default FaqSection;